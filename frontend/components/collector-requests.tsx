/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/KSrJY5Ij0Ca
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"
import { SetStateAction, useState, useEffect } from "react"
import Link from "next/link"
import { useRouter } from "next/navigation"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Pagination, PaginationContent, PaginationItem, PaginationPrevious, PaginationLink, PaginationNext } from "@/components/ui/pagination"
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from "@/components/ui/dialog"
import { useRequest } from "@/contexts/request-context"
import { useAuth } from "@/contexts/auth-context"
import PushNotification from "@/components/pushNotification";
import { updateRequest } from "@/apis/api"
import Cookies from "js-cookie"


// // Mock data for requests


export function Requests() {
  const [currentPage, setCurrentPage] = useState(1)
  const [selectedRequest, setSelectedRequest] = useState<{ id: number; address: string; status: string; pickupTime: string; } | null>(null)
  const [requestsPerPage, setRequestsPerPage] = useState(4)
  const router = useRouter()
  const { allRequests, fetchRequests } = useRequest();
  const { token, user } = useAuth(); 
  const [openRequestId, setOpenRequestId] = useState('');
  const [hasRefreshed, setHasRefreshed] = useState(false)



  const requests = Array.isArray(allRequests) ? allRequests : [];

  useEffect(() => {
    if (typeof window !== 'undefined' && !hasRefreshed) {
      const storedHasRefreshed = localStorage.getItem('hasRefreshed')
      if (!storedHasRefreshed) {
        localStorage.setItem('hasRefreshed', 'true')
        setHasRefreshed(true)
        window.location.reload()
      }
    }
  }, [hasRefreshed])
  

  useEffect(() => {
    fetchRequests(token);
    const interval = setInterval(() => {
      fetchRequests(token);
    }, 5000);

    return () => clearInterval(interval);
}, [token]);

  useEffect(() => {
    // fetchRequests(token);

      
    navigator.serviceWorker.addEventListener('message', event => {
      if (event.data.type === 'OPEN_REQUEST_DIALOG') {
        setOpenRequestId(event.data.requestId);
      }
    });

    const handleResize = () => {
      if (window.innerWidth >= 1024) {
        setRequestsPerPage(6)
      } else if (window.innerWidth >= 768) {
        setRequestsPerPage(4)
      } else {
        setRequestsPerPage(4)
      }
    }

    handleResize()
    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)

    

  }, [])

  const sortedRequests = requests.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());

  const indexOfLastRequest = currentPage * requestsPerPage
  const indexOfFirstRequest = indexOfLastRequest - requestsPerPage
  const currentRequests = sortedRequests.slice(indexOfFirstRequest, indexOfLastRequest)

  const paginate = (pageNumber: SetStateAction<number>) => setCurrentPage(pageNumber)

  const getBadgeVariant = (status: string) => {
    switch (status) {
      case "Assigned":
        return "outline"
      case "Accepted":
        return "secondary"
      case "Rejected":
        return "destructive"
      default:
        return "outline"
    }
  }

  const handleComplete = async (id: string) => {
    const token = Cookies.get('token')!;
    const requestStatus = "Collected";

    const response = await updateRequest(id, requestStatus, token);

  } 

  const handleNavigation = (address: string) => {
    router.push(`route/${address}`)
  }

  return (
    <div className="flex flex-col min-h-screen bg-background">
      <main className="flex-1 overflow-y-auto flex items-center justify-center">
        <div className="grid gap-4 p-4 md:p-6">
          <Card>
            <CardHeader className="flex items-center justify-between">
              <CardTitle>Requests</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
                { currentRequests.length === 0 ?
                ( <div className="flex items-center justify-center h-64 text-lg font-medium text-muted-foreground">No requests available</div> ) :
                
                (currentRequests.map((request : any) => (
                  <Dialog key={request._id}
                  open={openRequestId === request._id}
                  onOpenChange={(open) => {
                    if (!open) setOpenRequestId('');
                    else setOpenRequestId(request._id);
                  }}
                  >
                    <DialogTrigger asChild>
                      <div className="flex flex-col gap-2 p-4 border rounded-lg hover:bg-muted/50 cursor-pointer" onClick={() => setSelectedRequest(request)}>
                        <div className="flex items-center justify-between">
                          <div className="font-medium">{request.address}</div>
                          <Badge variant={getBadgeVariant(request.status)}>{request.requestStatus}</Badge>
                        </div>
                        <div className="text-sm text-muted-foreground">Pickup Time: {request.pickupTime || "2024-07-26 10:00 AM"}</div>
                      </div>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>Request Details</DialogTitle>
                      </DialogHeader>
                      <div className="grid gap-4 py-4">
                        <div className="grid grid-cols-4 items-center gap-4">
                          <span className="font-bold">Address:</span>
                          <span className="col-span-3">{request.address}</span>
                        </div>
                        <div className="grid grid-cols-4 items-center gap-4">
                          <span className="font-bold">Status:</span>
                          <span className="col-span-3">
                            <Badge variant={getBadgeVariant(request.status)}>{request.requestStatus}</Badge>
                          </span>
                        </div>
                        <div className="grid grid-cols-4 items-center gap-4">
                          <span className="font-bold">Bin ID:</span>
                          <span className="col-span-3">{request.binId}</span>
                        </div>
                        {(request.requestStatus === 'Collected') ?
                        (<><div className="grid grid-cols-4 items-center gap-4">
                          <span className="font-bold">Feedback Comment</span>
                          <span className="col-span-3">{request.feedbackComment}</span>
                        </div>
                          </>)
                          :
                          (
                        <div className="grid grid-cols-4 items-center gap-4">
                          <span className="font-bold">Pickup Time:</span>
                          <span className="col-span-3">{request.pickupTime || "2024-07-15 10:00 AM"}</span>
                        </div> 
                      )}
                      </div>
                       

                      <DialogFooter>
                        <Button variant="outline" onClick={() => handleComplete(request._id)}>Complete</Button>
                        <Button variant="secondary" onClick={() => handleNavigation(request.address)}>Navigate</Button>
                        <DialogClose asChild>
                          <Button variant="secondary">Close</Button>
                        </DialogClose>
                      </DialogFooter>
                    </DialogContent>
                  </Dialog>
                ))
              )}
              </div>
              <div className="flex justify-center mt-4">
                <Pagination>
                  <PaginationContent>
                    <PaginationItem>
                      <PaginationPrevious onClick={() => paginate(currentPage - 1)} />
                    </PaginationItem>
                    {[...Array(Math.ceil(requests.length / requestsPerPage))].map((_, index) => (
                      <PaginationItem key={index}>
                        <PaginationLink onClick={() => paginate(index + 1)} isActive={currentPage === index + 1}>
                          {index + 1}
                        </PaginationLink>
                      </PaginationItem>
                    ))}
                    <PaginationItem>
                      <PaginationNext onClick={() => paginate(currentPage + 1)} />
                    </PaginationItem>
                  </PaginationContent>
                </Pagination>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  )
}