/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/KSrJY5Ij0Ca
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"
import { SetStateAction, useState } from "react"
import Link from "next/link"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Pagination, PaginationContent, PaginationItem, PaginationPrevious, PaginationLink, PaginationNext } from "@/components/ui/pagination"
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from "@/components/ui/dialog"

// Mock data for requests
const mockRequests = [
  { id: 1, address: "123 Main St, Anytown USA", status: "Pending", pickupTime: "2023-07-15 10:00 AM" },
  { id: 2, address: "456 Oak Rd, Somewhere City", status: "Accepted", pickupTime: "2023-07-16 2:30 PM" },
  { id: 3, address: "789 Elm St, Othertown", status: "Rejected", pickupTime: "2023-07-17 9:00 AM" },
  // ... add more mock requests here
]

export function Requests() {
  const [currentPage, setCurrentPage] = useState(1)
  const [selectedRequest, setSelectedRequest] = useState<null | { id: number; address: string; status: string; pickupTime: string; }>(null)
  const requestsPerPage = 3
  const indexOfLastRequest = currentPage * requestsPerPage
  const indexOfFirstRequest = indexOfLastRequest - requestsPerPage
  const currentRequests = mockRequests.slice(indexOfFirstRequest, indexOfLastRequest)

  const paginate = (pageNumber: SetStateAction<number>) => setCurrentPage(pageNumber)

  const getBadgeVariant = (status: string) => {
    switch (status) {
      case "Pending":
        return "outline"
      case "Accepted":
        return "secondary"
      case "Rejected":
        return "destructive"
      default:
        return "outline"
    }
  }

  return (
    <div className="flex flex-col min-h-screen bg-background">
      <main className="flex-1 overflow-y-auto flex items-center justify-center">
        <div className="grid gap-4 p-4 md:p-6">
          <Card>
            <CardHeader className="flex items-center justify-between">
              <CardTitle>Incoming Requests</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {currentRequests.map((request) => (
                  <Dialog key={request.id}>
                    <DialogTrigger asChild>
                      <div className="flex flex-col gap-2 p-4 border rounded-lg hover:bg-muted/50 cursor-pointer" onClick={() => setSelectedRequest(request)}>
                        <div className="flex items-center justify-between">
                          <div className="font-medium">{request.address}</div>
                          <Badge variant={getBadgeVariant(request.status)}>{request.status}</Badge>
                        </div>
                        <div className="text-sm text-muted-foreground">Pickup Time: {request.pickupTime}</div>
                      </div>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>Request Details</DialogTitle>
                      </DialogHeader>
                      <div className="grid gap-4 py-4">
                        <div className="grid grid-cols-4 items-center gap-4">
                          <span className="font-bold">Address:</span>
                          <span className="col-span-3">{request.address}</span>
                        </div>
                        <div className="grid grid-cols-4 items-center gap-4">
                          <span className="font-bold">Status:</span>
                          <span className="col-span-3">
                            <Badge variant={getBadgeVariant(request.status)}>{request.status}</Badge>
                          </span>
                        </div>
                        <div className="grid grid-cols-4 items-center gap-4">
                          <span className="font-bold">Pickup Time:</span>
                          <span className="col-span-3">{request.pickupTime}</span>
                        </div>
                      </div>
                      <DialogFooter>
                        <Button variant="outline" onClick={() => console.log("Accept request", request.id)}>Accept</Button>
                        <Button variant="destructive" onClick={() => console.log("Reject request", request.id)}>Reject</Button>
                        <DialogClose asChild>
                          <Button variant="secondary">Close</Button>
                        </DialogClose>
                      </DialogFooter>
                    </DialogContent>
                  </Dialog>
                ))}
              </div>
              <div className="flex justify-center mt-4">
                <Pagination>
                  <PaginationContent>
                    <PaginationItem>
                      <PaginationPrevious onClick={() => paginate(currentPage - 1)} />
                    </PaginationItem>
                    {[...Array(Math.ceil(mockRequests.length / requestsPerPage))].map((_, index) => (
                      <PaginationItem key={index}>
                        <PaginationLink onClick={() => paginate(index + 1)} isActive={currentPage === index + 1}>
                          {index + 1}
                        </PaginationLink>
                      </PaginationItem>
                    ))}
                    <PaginationItem>
                      <PaginationNext onClick={() => paginate(currentPage + 1)} />
                    </PaginationItem>
                  </PaginationContent>
                </Pagination>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  )
}