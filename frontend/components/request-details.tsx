/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/Hjsiurghcm8
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Chivo } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Drawer, DrawerTrigger, DrawerContent, DrawerHeader, DrawerTitle, DrawerDescription, DrawerFooter, DrawerClose } from "@/components/ui/drawer"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import dynamic from 'next/dynamic'
import { useState } from "react"
import DynamicMap from "./dynamic-map"
import { getLocation, getAddress } from "@/apis/api"

// const MapWithNoSSR = dynamic(() => import('@/components/map'), {
//   ssr: false
// })

export function RequestDetails() {
  const [location, setLocation] = useState('');
  const [selectedLng, setSelectedLng] = useState<number | null>(null);
  const [selectedLat, setSelectedLat] = useState<number | null>(null);
  const [wasteType, setWasteType] = useState('');
  const [quantity, setQuantity] = useState('');
  const [ instructions, setInstructions] = useState('');

  const handleLocationSelect = (lng: number, lat: number) => {
    setSelectedLng(lng);
    setSelectedLat(lat);
  };

  const handleConfirmLocation = async () => {
    if (selectedLng && selectedLat) {
      try {
      //send coordinates to ghanpostapi and store the digital address
      const address = await getAddress(selectedLng.toString(), selectedLat.toString());
      // setLocation(`${selectedLng.toFixed(4)}, ${selectedLat.toFixed(4)}`);
      setLocation(address.DigitalAddress);
    } catch (error) {
      console.log(error);
    }
  };
}

  const handleCancelLocation = () => {
    setSelectedLat(null);
    setSelectedLng(null);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    //handle request saving
    console.log({ location, wasteType, quantity, instructions });
  };

  return (
    <div className="w-full max-w-4xl mx-auto py-12 md:py-16 lg:py-20">
      <div className="px-4 md:px-6 lg:px-8">
        <div className="text-center space-y-4">
          <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">Request Waste Collection</h1>
          <p className="text-muted-foreground md:text-xl">
            Fill out the form below to schedule a waste pickup at your location.
          </p>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div>
            <Label htmlFor="location">Location</Label>
            <div className="flex items-center gap-2">
              <Input 
                id="location" 
                type="text" 
                placeholder="Enter your address" 
                className="flex-1" 
                value={location}
                onChange={(e) => setLocation(e.target.value)}
                />
              <Drawer>
            <DrawerTrigger asChild>
              <Button variant="outline">
                <div className="h-5 w-5" />
                Select on Map
              </Button>
            </DrawerTrigger>
            <DrawerContent>
              <DrawerHeader >
                <DrawerTitle>Select Location</DrawerTitle>
                <DrawerDescription>Choose a location on the map for your waste pickup.</DrawerDescription>
              </DrawerHeader>
              <div className="flex-1">
                <div className="h-[400px]" >
                  <DynamicMap onSelectLocation={handleLocationSelect} />
                  </div> 
              </div>
              <DrawerFooter>
                <Button onClick={handleConfirmLocation}>Confirm Location</Button>
                <DrawerClose asChild>
                  <Button variant="outline" onClick={handleCancelLocation}>Close Map</Button>
                </DrawerClose>
              </DrawerFooter>
            </DrawerContent>
          </Drawer>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Label htmlFor="waste-type">Waste Type</Label>
              <Select onValueChange={setWasteType}>
                <SelectTrigger>
                  <SelectValue placeholder="Select waste type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="general">General Waste</SelectItem>
                  <SelectItem value="recycling">Recycling</SelectItem>
                  <SelectItem value="organic">Organic Waste</SelectItem>
                  <SelectItem value="hazardous">Hazardous Waste</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="quantity">Quantity</Label>
              <Input 
                  id="quantity" 
                  type="number" 
                  placeholder="Enter quantity" 
                  value={quantity}
                  onChange={(e) => setQuantity(e.target.value)}
                  />
            </div>
          </div>
          <div>
            <Label htmlFor="instructions">Special Instructions</Label>
            <Textarea 
                id="instructions" 
                rows={3} 
                placeholder="Enter any special instructions" 
                value={instructions}
                onChange={(e) => setInstructions(e.target.value)}
                />
          </div>
          <div className="flex justify-end">
            <Button type="submit">Request</Button>
          </div>
        </form>
      </div>
    </div>
  )
}
