// analytics.tsx
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/0GhKammCeBp
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo, SetStateAction } from "react"
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card"
import { ResponsiveBar } from "@nivo/bar"
import { ResponsivePie } from "@nivo/pie"

interface Request {
  id: string;
  status: string;
  type: string;
  date: string;
}

export function AnalyticsPage() {
  const [requests, setRequests] = useState<Request[]>([
    {
      id: "REQ001",
      status: "Pending",
      type: "Plastic",
      date: "2023-05-01",
    },
    {
      id: "REQ002",
      status: "Declined",
      type: "Paper",
      date: "2023-06-15",
    },
    {
      id: "REQ003",
      status: "Pending",
      type: "Plastic",
      date: "2023-07-01",
    },
    {
      id: "REQ004",
      status: "Pending",
      type: "Metal",
      date: "2023-08-01",
    },
    {
      id: "REQ005",
      status: "Pending",
      type: "Plastic",
      date: "2023-09-01",
    },
    {
      id: "REQ006",
      status: "Declined",
      type: "Paper",
      date: "2023-10-01",
    },
    {
      id: "REQ007",
      status: "Pending",
      type: "Metal",
      date: "2023-11-01",
    },
    {
      id: "REQ008",
      status: "Pending",
      type: "Plastic",
      date: "2023-12-01",
    },
  ])

  const [filteredRequests, setFilteredRequests] = useState<Request[]>(requests)
  const [selectedType, setSelectedType] = useState<string>("all")
  const [selectedPeriod, setSelectedPeriod] = useState<string>("all")

  const handleTypeFilter = (type: SetStateAction<string>) => {
    setSelectedType(type)
    if (type === "all") {
      setFilteredRequests(requests)
    } else {
      setFilteredRequests(requests.filter((request) => request.type === type))
    }
  }

  const handlePeriodFilter = (period: string) => {
    setSelectedPeriod(period)
    if (period === "all") {
      setFilteredRequests(requests)
    } else {
      const [startYear, endYear] = period.split("-").map((year) => parseInt(year))
      const start = new Date(startYear, 0, 1)
      const end = new Date(endYear, 11, 31)
      setFilteredRequests(requests.filter(
        (request) => new Date(request.date) >= start && new Date(request.date) <= end
      ))
    }
  }

  const totalRequests = requests.length
  const plasticRequests = requests.filter((request) => request.type === "Plastic").length
  const paperRequests = requests.filter((request) => request.type === "Paper").length
  const metalRequests = requests.filter((request) => request.type === "Metal").length

  const requestsByPeriod = useMemo(() => {
    const periods = [
      "2023-01-01 - 2023-03-31",
      "2023-04-01 - 2023-06-30",
      "2023-07-01 - 2023-09-30",
      "2023-10-01 - 2023-12-31",
    ]
    return periods.map((period) => {
      const [start, end] = period.split(" - ").map((date) => new Date(date))
      const count = requests.filter(
        (request) => new Date(request.date) >= start && new Date(request.date) <= end
      ).length
      return { period, count }
    })
  }, [requests])

  const pendingRequests = requests.filter((request) => request.status === "Pending").length
  const declinedRequests = requests.filter((request) => request.status === "Declined").length

  const requestsByStatus = useMemo(() => {
    return [
      { status: "Pending", count: pendingRequests },
      { status: "Declined", count: declinedRequests },
    ]
  }, [pendingRequests, declinedRequests])

  const requestsByTypePercentage = useMemo(() => {
    return [
      { type: "Plastic", percentage: (plasticRequests / totalRequests) * 100 },
      { type: "Paper", percentage: (paperRequests / totalRequests) * 100 },
      { type: "Metal", percentage: (metalRequests / totalRequests) * 100 },
    ]
  }, [plasticRequests, paperRequests, metalRequests, totalRequests])

  return (
    <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-6">
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader>
            <CardTitle>Total Requests</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-4xl font-bold">{totalRequests}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Plastic Requests</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-4xl font-bold">{plasticRequests}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Paper Requests</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-4xl font-bold">{paperRequests}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Metal Requests</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-4xl font-bold">{metalRequests}</div>
          </CardContent>
        </Card>
      </div>
      <Card>
        <CardHeader>
          <CardTitle>Analytics</CardTitle>
          <CardDescription>View analytics on requests over various periods.</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-2">
            <div>
              <h3 className="text-lg font-medium mb-2">Requests by Period</h3>
              <ResponsiveBar data={requestsByPeriod}  />
            </div>
            <div>
              <h3 className="text-lg font-medium mb-2">Request Types</h3>
              <ResponsivePie data={requestsByTypePercentage}  />
            </div>
          </div>
          <div className="grid gap-4 md:grid-cols-2">
            <div>
              <h3 className="text-lg font-medium mb-2">Requests by Status</h3>
              <ResponsiveBar data={requestsByStatus} />
            </div>
            <div>
              <h3 className="text-lg font-medium mb-2">Request Type Percentages</h3>
              <ResponsivePie data={requestsByTypePercentage}  />
            </div>
          </div>
        </CardContent>
      </Card>
    </main>
  );
}
