/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/tbIwijrcSVK
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { useRequest } from "@/contexts/request-context"

export function RequestsPage() {
  const { allRequests } = useRequest();
  const requests = Array.isArray(allRequests) ? allRequests : [];
  const [currentPage, setCurrentPage] = useState(1);
  const [requestsPerPage] = useState(5);


  const indexOfLastRequest = currentPage * requestsPerPage;
  const indexOfFirstRequest = indexOfLastRequest - requestsPerPage;
  const currentRequests = requests.slice(indexOfFirstRequest, indexOfLastRequest);
  const totalPages = Math.ceil(requests.length / requestsPerPage);

  const handlePageChange = (pageNumber) => setCurrentPage(pageNumber);


  const [filteredRequests, setFilteredRequests] = useState(requests)
  const [selectedType, setSelectedType] = useState("all")

  const handleTypeFilter = (type) => {
    setSelectedType(type)
    if(!Array.isArray(requests)) return;
    if (type === "all") {
      setFilteredRequests(requests)
    } else {
      setFilteredRequests(requests.filter((request) => request.wasteType === type))
    }
  }
  const totalRequests = currentRequests.length
  const plasticRequests = requests.filter((request) => request.wasteType === "plastic").length
  const domesticRequests = requests.filter((request) => request.wasteType === "domestic").length
  const metalRequests = requests.filter((request) => request.wasteType === "metal").length
  return (
        <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-6">
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            <Card>
              <CardHeader>
                <CardTitle>Total Requests</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-4xl font-bold">{totalRequests}</div>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Plastic Requests</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-4xl font-bold">{plasticRequests}</div>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Domestic Requests</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-4xl font-bold">{domesticRequests}</div>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Metal Requests</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-4xl font-bold">{metalRequests}</div>
              </CardContent>
            </Card>
          </div>
          <Card>
            <CardHeader>
              <CardTitle>Requests</CardTitle>
              <CardDescription>View and manage all requests.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="mb-4 flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Button
                    variant={selectedType === "all" ? "secondary" : "outline"}
                    onClick={() => handleTypeFilter("all")}>
                    All
                  </Button>
                  <Button
                    variant={selectedType === "Plastic" ? "secondary" : "outline"}
                    onClick={() => handleTypeFilter("plastic")}>
                    Plastic
                  </Button>
                  <Button
                    variant={selectedType === "domestic" ? "secondary" : "outline"}
                    onClick={() => handleTypeFilter("domestic")}>
                    Domestic
                  </Button>
                  <Button
                    variant={selectedType === "metal" ? "secondary" : "outline"}
                    onClick={() => handleTypeFilter("metal")}>
                    Metal
                  </Button>
                </div>
              </div>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>ID</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredRequests?.map((request) => (
                    <TableRow key={request._id}>
                      <TableCell>{request._id}</TableCell>
                      <TableCell>{request.wasteType}</TableCell>
                      <TableCell>
                        <Badge variant={request.requestStatus === "Pending" ? "secondary" : "outline"}>{request.status}</Badge>
                      </TableCell>
                      <TableCell>
                        <Button variant="outline" size="sm">
                          View
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
              <div className="flex justify-center mt-4">
              {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
                <Button 
                  key={page} 
                  onClick={() => handlePageChange(page)}
                  variant={currentPage === page ? "default" : "outline"}
                  className="mx-1"
                >
                  {page}
                </Button>
              ))}
            </div>
            </CardContent>
          </Card>
        </main>
  );
}
