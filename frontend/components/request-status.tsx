/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/sa957JO3NjO
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Chivo } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"
import { useEffect, useState } from "react"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Button } from "@/components/ui/button"
import { Check } from "lucide-react"
import { useRequest } from "@/contexts/request-context"
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from "@/components/ui/dialog"
import PaymentComponent from "./payment"
import { useRouter } from "next/navigation"
import { useAuth } from "@/contexts/auth-context"

interface RequestStatusProps {
  params: {
    id: string;
  };
}



export function RequestStatus({ params }: RequestStatusProps) {
  const { user } = useAuth();
  const { request, fetchRequest } = useRequest();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false);
  const router = useRouter();
  const { id } = params;


  

  useEffect(() => {
    if (id) {
     fetchRequest(id);
    }
  }, [id, fetchRequest]);

  // useEffect(() => {
  //   if (request.wasteType) {
  //     const price = wasteTypePrices[request.wasteType] || 10; 
  //     setAmount(price);
  //   }
  // }, [request.wasteType]);

  const handleCloseRequest = () => {
    router.push('/users/request');
  };

 
  return (
    <div className="w-full max-w-4xl mx-auto py-12 md:py-16 lg:py-20">
      <div className="px-4 md:px-6 lg:px-8">
        <div className="text-center space-y-4">
          <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
            Waste Collection Request Status
          </h1>
          <p className="text-muted-foreground md:text-xl">
            View the status of your waste collection request and take action.
          </p>
        </div>
        <div className="mt-8 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Request Details</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <div className="font-bold">Location</div>
                  <div>{request.address}</div>
                </div>
                <div>
                  <div className="font-bold">Waste Type</div>
                  <div>{request.wasteType}</div>
                </div>
                <div>
                  <div className="font-bold">Special Instructions</div>
                  <div>{request.instructions}</div>
                </div>
                <div>
                  <div className="font-bold">Payment Status</div>
                  <div>{request.paymentStatus}</div>
                </div>
                <div>
                  <div className="font-bold">Amount Due</div>
                  <div>GH₵{request.amount?.toFixed(2)}</div>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Request Status</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-between">
                <div className="font-bold">Status</div>
                <div className="text-green-500 font-medium">{request.requestStatus}</div>
              </div>
              <Separator className="my-4" />
              <div className="flex items-center justify-between">
                <div className="font-bold">Scheduled Pickup</div>
                <div>June 15, 2023</div>
              </div>
            </CardContent>
          </Card>
          <div className="flex justify-end gap-2">
          
              <Button variant="outline" onClick={handleCloseRequest}>Close</Button>
              {
              (request.paymentStatus === 'unpaid') && (
              
              <Dialog open={isPaymentDialogOpen} onOpenChange={setIsPaymentDialogOpen}>
                <DialogTrigger asChild>
                  <Button>Make Payment</Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Confirm Payment</DialogTitle>
                    <DialogDescription>
                    You are about to make a payment of GH₵{request.amount?.toFixed(2)} for {request.wasteType} waste collection.
                    </DialogDescription>
                  </DialogHeader>
                  <PaymentComponent
                    initialEmail={user?.email || ''}
                    initialAmount={request.amount?.toString()}
                    requestId={id}
                  />
                  <DialogFooter>
                    <DialogClose asChild>
                    <Button variant="outline">Cancel</Button>
                    </DialogClose>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
              )}
           
          </div>
        </div>
      </div>
    </div>
  )
}
